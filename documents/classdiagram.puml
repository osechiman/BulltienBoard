@startuml

package "logger" {
	class "LogColumns" as logger.LogColumns <<E,#FFCC00>> {
		+PID: string
		+UA: string
		+Path: string
		+Body: []byte
		+Error(c: *invalid type, msg: interface{})
		+Info(c: *invalid type, msg: interface{})
		+Debug(c: *invalid type, msg: interface{})
		+Warn(c: *invalid type, msg: interface{})
	}
}



package "logger" {
	interface "Logger" as logger.Logger {
		+Debug(c: *context.Context, msg: interface{})
		+Error(c: *context.Context, msg: interface{})
		+Info(c: *context.Context, msg: interface{})
		+Warn(c: *context.Context, msg: interface{})
	}
}



package "presenters" {
	class "BulletinBoard" as presenters.BulletinBoard <<V,Orchid>> {
		+ID: string
		+Title: string
		+Threads: []presenters.Thread
	}
}

	presenters.BulletinBoard --> presenters.Thread


package "presenters" {
	class "BulletinBoardPresenter" as presenters.BulletinBoardPresenter <<V,Orchid>> {
		+ConvertToHttpBulletinBoardListResponse(bbl: []invalid type): *presenters.HTTPResponse
		+ConvertToHttpBulletinBoardResponse(bb: invalid type): *presenters.HTTPResponse
	}
}


	presenters.BulletinBoardPresenter ..> presenters.HTTPResponse : <<return>> 
	presenters.BulletinBoardPresenter ..> presenters.HTTPResponse : <<return>> 

package "presenters" {
	class "Comment" as presenters.Comment <<V,Orchid>> {
		+ID: string
		+ThreadID: string
		+Text: string
		+CreatAt: int64
	}
}



package "presenters" {
	class "CommentPresenter" as presenters.CommentPresenter <<V,Orchid>> {
		+ConvertToHttpCommentListResponse(cl: []invalid type): *presenters.HTTPResponse
		+ConvertToHttpCommentResponse(c: invalid type): *presenters.HTTPResponse
	}
}


	presenters.CommentPresenter ..> presenters.HTTPResponse : <<return>> 
	presenters.CommentPresenter ..> presenters.HTTPResponse : <<return>> 

package "presenters" {
	class "ErrorPresenter" as presenters.ErrorPresenter <<V,Orchid>> {
		+ConvertToHttpErrorResponse(httpStatusCode: int, err: error): *presenters.HTTPResponse
	}
}


	presenters.ErrorPresenter ..> presenters.HTTPResponse : <<return>> 

package "presenters" {
	class "HTTPResponse" as presenters.HTTPResponse <<V,Orchid>> {
		+Status: int
		+Message: string
		+Data: interface{}
	}
}



package "presenters" {
	class "Thread" as presenters.Thread <<V,Orchid>> {
		+ID: string
		+BulletinBoardID: string
		+Title: string
		+Comments: []presenters.Comment
	}
}

	presenters.Thread --> presenters.Comment


package "presenters" {
	class "ThreadPresenter" as presenters.ThreadPresenter <<V,Orchid>> {
		+ConvertToHttpThreadListResponse(tl: []invalid type): *presenters.HTTPResponse
		+ConvertToHttpThreadResponse(t: invalid type): *presenters.HTTPResponse
	}
}


	presenters.ThreadPresenter ..> presenters.HTTPResponse : <<return>> 
	presenters.ThreadPresenter ..> presenters.HTTPResponse : <<return>> 

package "errorobjects" {
	class "CharacterSizeValidationError" as errorobjects.CharacterSizeValidationError <<V,Orchid>> {
		-msg: string
		-code: int
		+Error(): string
	}
}



package "errorobjects" {
	class "InternalServerError" as errorobjects.InternalServerError <<V,Orchid>> {
		-msg: string
		-code: int
		+Error(): string
	}
}



package "errorobjects" {
	class "MissingRequiredFieldsError" as errorobjects.MissingRequiredFieldsError <<V,Orchid>> {
		-msg: string
		-code: int
		+Error(): string
	}
}



package "errorobjects" {
	class "NotFoundError" as errorobjects.NotFoundError <<V,Orchid>> {
		-msg: string
		-code: int
		+Error(): string
	}
}



package "errorobjects" {
	class "ParameterBindingError" as errorobjects.ParameterBindingError <<V,Orchid>> {
		-msg: string
		-code: int
		+Error(): string
	}
}



package "errorobjects" {
	class "ResourceLimitedError" as errorobjects.ResourceLimitedError <<V,Orchid>> {
		-msg: string
		-code: int
		+Error(): string
	}
}



package "valueobjects" {
	class "BulletinBoardID" as valueobjects.BulletinBoardID <<V,Orchid>> {
		-id: valueobjects.bulletinBoardID
		-str: string
		+Get(): valueobjects.BulletinBoardID
		+String(): string
		+Equals(other: valueobjects.BulletinBoardID): bool
	}
}

	valueobjects.BulletinBoardID --> valueobjects.bulletinBoardID

	valueobjects.BulletinBoardID ..> valueobjects.BulletinBoardID : <<return>> 
	valueobjects.BulletinBoardID ..> valueobjects.BulletinBoardID : <<use>> 

package "valueobjects" {
	class "CommentID" as valueobjects.CommentID <<V,Orchid>> {
		-id: valueobjects.commentID
		-str: string
		+Get(): valueobjects.CommentID
		+String(): string
		+Equals(other: valueobjects.CommentID): bool
	}
}

	valueobjects.CommentID --> valueobjects.commentID

	valueobjects.CommentID ..> valueobjects.CommentID : <<return>> 
	valueobjects.CommentID ..> valueobjects.CommentID : <<use>> 

package "valueobjects" {
	class "CommentTime" as valueobjects.CommentTime <<V,Orchid>> {
		-unixTime: int64
		+Get(): valueobjects.CommentTime
		+ToUnixTime(): int64
		+Equals(other: valueobjects.CommentTime): bool
	}
}


	valueobjects.CommentTime ..> valueobjects.CommentTime : <<return>> 
	valueobjects.CommentTime ..> valueobjects.CommentTime : <<use>> 

package "valueobjects" {
	class "ThreadID" as valueobjects.ThreadID <<V,Orchid>> {
		-id: valueobjects.threadID
		-str: string
		+Get(): valueobjects.ThreadID
		+String(): string
		+Equals(other: valueobjects.ThreadID): bool
	}
}

	valueobjects.ThreadID --> valueobjects.threadID

	valueobjects.ThreadID ..> valueobjects.ThreadID : <<return>> 
	valueobjects.ThreadID ..> valueobjects.ThreadID : <<use>> 

package "valueobjects" {
	class "bulletinBoardID" as valueobjects.bulletinBoardID <<V,Orchid>>
}



package "valueobjects" {
	class "commentID" as valueobjects.commentID <<V,Orchid>>
}



package "valueobjects" {
	class "threadID" as valueobjects.threadID <<V,Orchid>>
}



package "controllers" {
	class "BulletinBoard" as controllers.BulletinBoard <<V,Orchid>> {
		+ID: string
		+Title: string
	}
}



package "controllers" {
	class "BulletinBoardController" as controllers.BulletinBoardController <<V,Orchid>> {
		+GetBulletinBoardByID(ID: string): (invalid type, error)
		+AddBulletinBoard(c: *invalid type): (invalid type, error)
		+ListBulletinBoard(): ([]invalid type, error)
	}
}



package "controllers" {
	class "Comment" as controllers.Comment <<V,Orchid>> {
		+ID: string
		+ThreadID: string
		+Text: string
	}
}



package "controllers" {
	class "CommentController" as controllers.CommentController <<V,Orchid>> {
		+AddComment(c: *invalid type): (invalid type, error)
		+ListComment(): ([]invalid type, error)
		+ListCommentByThreadID(tID: string): ([]invalid type, error)
	}
}



package "controllers" {
	class "Thread" as controllers.Thread <<V,Orchid>> {
		+ID: string
		+BulletinBoardID: string
		+Title: string
	}
}



package "controllers" {
	class "ThreadController" as controllers.ThreadController <<V,Orchid>> {
		+GetThreadByID(ID: string): (invalid type, error)
		+AddThread(c: *invalid type): (invalid type, error)
		+ListThread(): ([]invalid type, error)
		+ListThreadByBulletinBoardID(bID: string): ([]invalid type, error)
	}
}



package "gateways" {
	class "InMemoryRepository" as gateways.InMemoryRepository <<E,#FFCC00>> {
		+GetBulletinBoardByID(ID: valueobjects.BulletinBoardID): (invalid type, error)
		+AddBulletinBoard(b: invalid type): error
		+ListBulletinBoard(): ([]invalid type, error)
		+ListThread(): ([]invalid type, error)
		+ListThreadByBulletinBoardID(bID: valueobjects.BulletinBoardID): ([]invalid type, error)
		+GetThreadByID(ID: valueobjects.ThreadID): (invalid type, error)
		+AddThread(t: invalid type): error
		+ListComment(): ([]invalid type, error)
		+ListCommentByThreadID(tID: valueobjects.ThreadID): ([]invalid type, error)
		+AddComment(c: invalid type): error
		+DeleteAll()
		+DeleteBulletinBoardAll(): error
		+DeleteThread()
		+DeleteComment()
	}
}


	gateways.InMemoryRepository ..> valueobjects.BulletinBoardID : <<use>> 
	gateways.InMemoryRepository ..> valueobjects.BulletinBoardID : <<use>> 
	gateways.InMemoryRepository ..> valueobjects.ThreadID : <<use>> 
	gateways.InMemoryRepository ..> valueobjects.ThreadID : <<use>> 

package "configs" {
	class "Config" as configs.Config <<V,Orchid>> {
		+Environment: string
	}
}



package "configs" {
	interface "Configer" as configs.Configer {
		+Get(): configs.Config
	}
}


	configs.Configer ..> configs.Config : <<return>> 

package "configs" {
	class "OsConfig" as configs.OsConfig <<V,Orchid>> {
		-config: configs.Config
		+Get(): configs.Config
	}
}

	configs.OsConfig --> configs.Config

	configs.OsConfig ..> configs.Config : <<return>> 

package "configs" {
	class "YamlConfig" as configs.YamlConfig <<V,Orchid>> {
		-config: configs.Config
		+Get(): configs.Config
	}
}

	configs.YamlConfig --> configs.Config

	configs.YamlConfig ..> configs.Config : <<return>> 

package "entities" {
	class "BulletinBoard" as entities.BulletinBoard <<V,Orchid>> {
		+ID: entities.BulletinBoardIDer
		+Title: string
		+Threads: []entities.Thread
	}
}

	entities.BulletinBoard --> entities.BulletinBoardIDer
	entities.BulletinBoard --> entities.Thread


package "entities" {
	interface "BulletinBoardIDer" as entities.BulletinBoardIDer {
		+Equals(id: valueobjects.BulletinBoardID): bool
		+Get(): valueobjects.BulletinBoardID
		+String(): string
	}
}


	entities.BulletinBoardIDer ..> valueobjects.BulletinBoardID : <<use>> 
	entities.BulletinBoardIDer ..> valueobjects.BulletinBoardID : <<return>> 

package "entities" {
	class "Comment" as entities.Comment <<V,Orchid>> {
		+ID: entities.CommentIDer
		+ThreadID: entities.ThreadIDer
		+Text: string
		+CreateAt: entities.CommentTimer
	}
}

	entities.Comment --> entities.CommentIDer
	entities.Comment --> entities.ThreadIDer
	entities.Comment --> entities.CommentTimer


package "entities" {
	interface "CommentIDer" as entities.CommentIDer {
		+Get(): valueobjects.CommentID
		+String(): string
	}
}


	entities.CommentIDer ..> valueobjects.CommentID : <<return>> 

package "entities" {
	interface "CommentTimer" as entities.CommentTimer {
		+Equals(ct: valueobjects.CommentTime): bool
		+Get(): valueobjects.CommentTime
		+ToUnixTime(): int64
	}
}


	entities.CommentTimer ..> valueobjects.CommentTime : <<use>> 
	entities.CommentTimer ..> valueobjects.CommentTime : <<return>> 

package "entities" {
	class "Thread" as entities.Thread <<V,Orchid>> {
		+ID: entities.ThreadIDer
		+BulletinBoardID: entities.BulletinBoardIDer
		+Title: string
		+Comments: []entities.Comment
	}
}

	entities.Thread --> entities.ThreadIDer
	entities.Thread --> entities.BulletinBoardIDer
	entities.Thread --> entities.Comment


package "entities" {
	interface "ThreadIDer" as entities.ThreadIDer {
		+Equals(id: valueobjects.ThreadID): bool
		+Get(): valueobjects.ThreadID
		+String(): string
	}
}


	entities.ThreadIDer ..> valueobjects.ThreadID : <<use>> 
	entities.ThreadIDer ..> valueobjects.ThreadID : <<return>> 

package "usecases" {
	interface "BulletinBoardRepositorer" as usecases.BulletinBoardRepositorer {
		+AddBulletinBoard(bb: invalid type): error
		+DeleteBulletinBoardAll(): error
		+GetBulletinBoardByID(ID: valueobjects.BulletinBoardID): (invalid type, error)
		+ListBulletinBoard(): ([]invalid type, error)
	}
}


	usecases.BulletinBoardRepositorer ..> valueobjects.BulletinBoardID : <<use>> 

package "usecases" {
	class "BulletinBoardUsecase" as usecases.BulletinBoardUsecase <<E,#FFCC00>> {
		+BulletinBoardRepository: usecases.BulletinBoardRepositorer
		+ThreadRepository: usecases.ThreadRepositorer
		+GetBulletinBoardByID(ID: valueobjects.BulletinBoardID): (invalid type, error)
		+AddBulletinBoard(bb: invalid type): error
		+ListBulletinBoard(): ([]invalid type, error)
	}
}

	usecases.BulletinBoardUsecase --> usecases.BulletinBoardRepositorer
	usecases.BulletinBoardUsecase --> usecases.ThreadRepositorer

	usecases.BulletinBoardUsecase ..> valueobjects.BulletinBoardID : <<use>> 

package "usecases" {
	interface "CommentRepositorer" as usecases.CommentRepositorer {
		+AddComment(c: invalid type): error
		+ListComment(): ([]invalid type, error)
		+ListCommentByThreadID(tID: valueobjects.ThreadID): ([]invalid type, error)
	}
}


	usecases.CommentRepositorer ..> valueobjects.ThreadID : <<use>> 

package "usecases" {
	class "CommentUsecase" as usecases.CommentUsecase <<E,#FFCC00>> {
		+CommentRepository: usecases.CommentRepositorer
		+ThreadRepository: usecases.ThreadRepositorer
		+AddComment(c: invalid type): error
		+ListComment(): ([]invalid type, error)
		+ListCommentByThreadID(tID: valueobjects.ThreadID): ([]invalid type, error)
	}
}

	usecases.CommentUsecase --> usecases.CommentRepositorer
	usecases.CommentUsecase --> usecases.ThreadRepositorer

	usecases.CommentUsecase ..> valueobjects.ThreadID : <<use>> 

package "usecases" {
	interface "ThreadRepositorer" as usecases.ThreadRepositorer {
		+AddThread(t: invalid type): error
		+GetThreadByID(ID: valueobjects.ThreadID): (invalid type, error)
		+ListThread(): ([]invalid type, error)
		+ListThreadByBulletinBoardID(bID: valueobjects.BulletinBoardID): ([]invalid type, error)
	}
}


	usecases.ThreadRepositorer ..> valueobjects.ThreadID : <<use>> 
	usecases.ThreadRepositorer ..> valueobjects.BulletinBoardID : <<use>> 

package "usecases" {
	class "ThreadUsecase" as usecases.ThreadUsecase <<E,#FFCC00>> {
		+ThreadRepository: usecases.ThreadRepositorer
		+BulletinBoardRepository: usecases.BulletinBoardRepositorer
		+CommentRepository: usecases.CommentRepositorer
		+GetThreadByID(ID: valueobjects.ThreadID): (invalid type, error)
		+AddThread(t: invalid type): error
		+ListThread(): ([]invalid type, error)
		+ListThreadByBulletinBoardID(bID: valueobjects.BulletinBoardID): ([]invalid type, error)
	}
}

	usecases.ThreadUsecase --> usecases.ThreadRepositorer
	usecases.ThreadUsecase --> usecases.BulletinBoardRepositorer
	usecases.ThreadUsecase --> usecases.CommentRepositorer

	usecases.ThreadUsecase ..> valueobjects.ThreadID : <<use>> 
	usecases.ThreadUsecase ..> valueobjects.BulletinBoardID : <<use>> 

	gateways.InMemoryRepository -up-|> usecases.BulletinBoardRepositorer
	gateways.InMemoryRepository -up-|> usecases.CommentRepositorer
	gateways.InMemoryRepository -up-|> usecases.ThreadRepositorer
	configs.OsConfig -up-|> configs.Configer
	configs.YamlConfig -up-|> configs.Configer
	usecases.CommentUsecase -up-|> usecases.CommentRepositorer
	usecases.ThreadUsecase -up-|> usecases.ThreadRepositorer


@enduml
