// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BulletinBoard is an object representing the database table.
type BulletinBoard struct { // BulletinBoardのID
	// UUIDを期待しています
	ID string `boil:"id" json:"id" toml:"id" yaml:"id"`
	// BulletinBoardのタイトル
	Title string `boil:"title" json:"title" toml:"title" yaml:"title"`
	// ThreadのID
	// BullitienBoardにぶら下がるThreadのIDが格納されます
	ThreadID string `boil:"thread_id" json:"thread_id" toml:"thread_id" yaml:"thread_id"`

	R *bulletinBoardR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L bulletinBoardL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BulletinBoardColumns = struct {
	ID       string
	Title    string
	ThreadID string
}{
	ID:       "id",
	Title:    "title",
	ThreadID: "thread_id",
}

var BulletinBoardTableColumns = struct {
	ID       string
	Title    string
	ThreadID string
}{
	ID:       "BulletinBoard.id",
	Title:    "BulletinBoard.title",
	ThreadID: "BulletinBoard.thread_id",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var BulletinBoardWhere = struct {
	ID       whereHelperstring
	Title    whereHelperstring
	ThreadID whereHelperstring
}{
	ID:       whereHelperstring{field: "`BulletinBoard`.`id`"},
	Title:    whereHelperstring{field: "`BulletinBoard`.`title`"},
	ThreadID: whereHelperstring{field: "`BulletinBoard`.`thread_id`"},
}

// BulletinBoardRels is where relationship names are stored.
var BulletinBoardRels = struct {
	BulltienBoardThreads string
}{
	BulltienBoardThreads: "BulltienBoardThreads",
}

// bulletinBoardR is where relationships are stored.
type bulletinBoardR struct {
	BulltienBoardThreads ThreadSlice `boil:"BulltienBoardThreads" json:"BulltienBoardThreads" toml:"BulltienBoardThreads" yaml:"BulltienBoardThreads"`
}

// NewStruct creates a new relationship struct
func (*bulletinBoardR) NewStruct() *bulletinBoardR {
	return &bulletinBoardR{}
}

func (r *bulletinBoardR) GetBulltienBoardThreads() ThreadSlice {
	if r == nil {
		return nil
	}
	return r.BulltienBoardThreads
}

// bulletinBoardL is where Load methods for each relationship are stored.
type bulletinBoardL struct{}

var (
	bulletinBoardAllColumns            = []string{"id", "title", "thread_id"}
	bulletinBoardColumnsWithoutDefault = []string{"id", "title", "thread_id"}
	bulletinBoardColumnsWithDefault    = []string{}
	bulletinBoardPrimaryKeyColumns     = []string{"id"}
	bulletinBoardGeneratedColumns      = []string{}
)

type (
	// BulletinBoardSlice is an alias for a slice of pointers to BulletinBoard.
	// This should almost always be used instead of []BulletinBoard.
	BulletinBoardSlice []*BulletinBoard
	// BulletinBoardHook is the signature for custom BulletinBoard hook methods
	BulletinBoardHook func(context.Context, boil.ContextExecutor, *BulletinBoard) error

	bulletinBoardQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	bulletinBoardType                 = reflect.TypeOf(&BulletinBoard{})
	bulletinBoardMapping              = queries.MakeStructMapping(bulletinBoardType)
	bulletinBoardPrimaryKeyMapping, _ = queries.BindMapping(bulletinBoardType, bulletinBoardMapping, bulletinBoardPrimaryKeyColumns)
	bulletinBoardInsertCacheMut       sync.RWMutex
	bulletinBoardInsertCache          = make(map[string]insertCache)
	bulletinBoardUpdateCacheMut       sync.RWMutex
	bulletinBoardUpdateCache          = make(map[string]updateCache)
	bulletinBoardUpsertCacheMut       sync.RWMutex
	bulletinBoardUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var bulletinBoardAfterSelectHooks []BulletinBoardHook

var bulletinBoardBeforeInsertHooks []BulletinBoardHook
var bulletinBoardAfterInsertHooks []BulletinBoardHook

var bulletinBoardBeforeUpdateHooks []BulletinBoardHook
var bulletinBoardAfterUpdateHooks []BulletinBoardHook

var bulletinBoardBeforeDeleteHooks []BulletinBoardHook
var bulletinBoardAfterDeleteHooks []BulletinBoardHook

var bulletinBoardBeforeUpsertHooks []BulletinBoardHook
var bulletinBoardAfterUpsertHooks []BulletinBoardHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BulletinBoard) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bulletinBoardAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BulletinBoard) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bulletinBoardBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BulletinBoard) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bulletinBoardAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BulletinBoard) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bulletinBoardBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BulletinBoard) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bulletinBoardAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BulletinBoard) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bulletinBoardBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BulletinBoard) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bulletinBoardAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BulletinBoard) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bulletinBoardBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BulletinBoard) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bulletinBoardAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBulletinBoardHook registers your hook function for all future operations.
func AddBulletinBoardHook(hookPoint boil.HookPoint, bulletinBoardHook BulletinBoardHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		bulletinBoardAfterSelectHooks = append(bulletinBoardAfterSelectHooks, bulletinBoardHook)
	case boil.BeforeInsertHook:
		bulletinBoardBeforeInsertHooks = append(bulletinBoardBeforeInsertHooks, bulletinBoardHook)
	case boil.AfterInsertHook:
		bulletinBoardAfterInsertHooks = append(bulletinBoardAfterInsertHooks, bulletinBoardHook)
	case boil.BeforeUpdateHook:
		bulletinBoardBeforeUpdateHooks = append(bulletinBoardBeforeUpdateHooks, bulletinBoardHook)
	case boil.AfterUpdateHook:
		bulletinBoardAfterUpdateHooks = append(bulletinBoardAfterUpdateHooks, bulletinBoardHook)
	case boil.BeforeDeleteHook:
		bulletinBoardBeforeDeleteHooks = append(bulletinBoardBeforeDeleteHooks, bulletinBoardHook)
	case boil.AfterDeleteHook:
		bulletinBoardAfterDeleteHooks = append(bulletinBoardAfterDeleteHooks, bulletinBoardHook)
	case boil.BeforeUpsertHook:
		bulletinBoardBeforeUpsertHooks = append(bulletinBoardBeforeUpsertHooks, bulletinBoardHook)
	case boil.AfterUpsertHook:
		bulletinBoardAfterUpsertHooks = append(bulletinBoardAfterUpsertHooks, bulletinBoardHook)
	}
}

// One returns a single bulletinBoard record from the query.
func (q bulletinBoardQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BulletinBoard, error) {
	o := &BulletinBoard{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for BulletinBoard")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BulletinBoard records from the query.
func (q bulletinBoardQuery) All(ctx context.Context, exec boil.ContextExecutor) (BulletinBoardSlice, error) {
	var o []*BulletinBoard

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to BulletinBoard slice")
	}

	if len(bulletinBoardAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BulletinBoard records in the query.
func (q bulletinBoardQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count BulletinBoard rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q bulletinBoardQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if BulletinBoard exists")
	}

	return count > 0, nil
}

// BulltienBoardThreads retrieves all the Thread's Threads with an executor via bulltien_board_id column.
func (o *BulletinBoard) BulltienBoardThreads(mods ...qm.QueryMod) threadQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`Thread`.`bulltien_board_id`=?", o.ID),
	)

	return Threads(queryMods...)
}

// LoadBulltienBoardThreads allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (bulletinBoardL) LoadBulltienBoardThreads(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBulletinBoard interface{}, mods queries.Applicator) error {
	var slice []*BulletinBoard
	var object *BulletinBoard

	if singular {
		var ok bool
		object, ok = maybeBulletinBoard.(*BulletinBoard)
		if !ok {
			object = new(BulletinBoard)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBulletinBoard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBulletinBoard))
			}
		}
	} else {
		s, ok := maybeBulletinBoard.(*[]*BulletinBoard)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBulletinBoard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBulletinBoard))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &bulletinBoardR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &bulletinBoardR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`Thread`),
		qm.WhereIn(`Thread.bulltien_board_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Thread")
	}

	var resultSlice []*Thread
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Thread")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on Thread")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Thread")
	}

	if len(threadAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BulltienBoardThreads = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &threadR{}
			}
			foreign.R.BulltienBoard = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BulltienBoardID {
				local.R.BulltienBoardThreads = append(local.R.BulltienBoardThreads, foreign)
				if foreign.R == nil {
					foreign.R = &threadR{}
				}
				foreign.R.BulltienBoard = local
				break
			}
		}
	}

	return nil
}

// AddBulltienBoardThreads adds the given related objects to the existing relationships
// of the BulletinBoard, optionally inserting them as new records.
// Appends related to o.R.BulltienBoardThreads.
// Sets related.R.BulltienBoard appropriately.
func (o *BulletinBoard) AddBulltienBoardThreads(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Thread) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BulltienBoardID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `Thread` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"bulltien_board_id"}),
				strmangle.WhereClause("`", "`", 0, threadPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BulltienBoardID = o.ID
		}
	}

	if o.R == nil {
		o.R = &bulletinBoardR{
			BulltienBoardThreads: related,
		}
	} else {
		o.R.BulltienBoardThreads = append(o.R.BulltienBoardThreads, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &threadR{
				BulltienBoard: o,
			}
		} else {
			rel.R.BulltienBoard = o
		}
	}
	return nil
}

// BulletinBoards retrieves all the records using an executor.
func BulletinBoards(mods ...qm.QueryMod) bulletinBoardQuery {
	mods = append(mods, qm.From("`BulletinBoard`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`BulletinBoard`.*"})
	}

	return bulletinBoardQuery{q}
}

// FindBulletinBoard retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBulletinBoard(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*BulletinBoard, error) {
	bulletinBoardObj := &BulletinBoard{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `BulletinBoard` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, bulletinBoardObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from BulletinBoard")
	}

	if err = bulletinBoardObj.doAfterSelectHooks(ctx, exec); err != nil {
		return bulletinBoardObj, err
	}

	return bulletinBoardObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BulletinBoard) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no BulletinBoard provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bulletinBoardColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	bulletinBoardInsertCacheMut.RLock()
	cache, cached := bulletinBoardInsertCache[key]
	bulletinBoardInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			bulletinBoardAllColumns,
			bulletinBoardColumnsWithDefault,
			bulletinBoardColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(bulletinBoardType, bulletinBoardMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(bulletinBoardType, bulletinBoardMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `BulletinBoard` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `BulletinBoard` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `BulletinBoard` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, bulletinBoardPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into BulletinBoard")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for BulletinBoard")
	}

CacheNoHooks:
	if !cached {
		bulletinBoardInsertCacheMut.Lock()
		bulletinBoardInsertCache[key] = cache
		bulletinBoardInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the BulletinBoard.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BulletinBoard) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	bulletinBoardUpdateCacheMut.RLock()
	cache, cached := bulletinBoardUpdateCache[key]
	bulletinBoardUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			bulletinBoardAllColumns,
			bulletinBoardPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update BulletinBoard, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `BulletinBoard` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, bulletinBoardPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(bulletinBoardType, bulletinBoardMapping, append(wl, bulletinBoardPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update BulletinBoard row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for BulletinBoard")
	}

	if !cached {
		bulletinBoardUpdateCacheMut.Lock()
		bulletinBoardUpdateCache[key] = cache
		bulletinBoardUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q bulletinBoardQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for BulletinBoard")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for BulletinBoard")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BulletinBoardSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bulletinBoardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `BulletinBoard` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, bulletinBoardPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in bulletinBoard slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all bulletinBoard")
	}
	return rowsAff, nil
}

var mySQLBulletinBoardUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BulletinBoard) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no BulletinBoard provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bulletinBoardColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLBulletinBoardUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	bulletinBoardUpsertCacheMut.RLock()
	cache, cached := bulletinBoardUpsertCache[key]
	bulletinBoardUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			bulletinBoardAllColumns,
			bulletinBoardColumnsWithDefault,
			bulletinBoardColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			bulletinBoardAllColumns,
			bulletinBoardPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert BulletinBoard, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`BulletinBoard`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `BulletinBoard` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(bulletinBoardType, bulletinBoardMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(bulletinBoardType, bulletinBoardMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for BulletinBoard")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(bulletinBoardType, bulletinBoardMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for BulletinBoard")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for BulletinBoard")
	}

CacheNoHooks:
	if !cached {
		bulletinBoardUpsertCacheMut.Lock()
		bulletinBoardUpsertCache[key] = cache
		bulletinBoardUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single BulletinBoard record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BulletinBoard) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no BulletinBoard provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), bulletinBoardPrimaryKeyMapping)
	sql := "DELETE FROM `BulletinBoard` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from BulletinBoard")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for BulletinBoard")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q bulletinBoardQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no bulletinBoardQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from BulletinBoard")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for BulletinBoard")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BulletinBoardSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(bulletinBoardBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bulletinBoardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `BulletinBoard` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, bulletinBoardPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from bulletinBoard slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for BulletinBoard")
	}

	if len(bulletinBoardAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BulletinBoard) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBulletinBoard(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BulletinBoardSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BulletinBoardSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bulletinBoardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `BulletinBoard`.* FROM `BulletinBoard` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, bulletinBoardPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BulletinBoardSlice")
	}

	*o = slice

	return nil
}

// BulletinBoardExists checks if the BulletinBoard row exists.
func BulletinBoardExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `BulletinBoard` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if BulletinBoard exists")
	}

	return exists, nil
}
